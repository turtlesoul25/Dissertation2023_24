{"changed":true,"filter":false,"title":"NRP.mos","tooltip":"/NRP.mos","value":"model nurse_rostering\n  uses \"mmxprs\"\n\n  writeln(\"Begin running model\")\n  declarations\n      NurseID:                          set of string                              ! Set of Nurses (i)\n      PlanningHorizon:                  integer                                    ! Number of days in the planning horizon (d)\n      Days:                             set of integer                             ! Set of days in the planning horizon\n      NumWeekends:                      integer                                    ! Number of weekends in planning horizon\n      Weekends:                         set of integer                             ! Set of weekends in the planning horizon\n      ShiftID:                          set of string                              ! Types of shifts (t)\n      ForbiddenShifts:                  array(ShiftID, ShiftID) of string          ! Set of shift types that cannot be assigned immediately after shift type t\n      DaysOff:                          array(NurseID) of set of integer           ! Set of days that nurse i cannot be assigned shifts\n      ShiftLength:                      array(ShiftID) of integer                  ! Length of shift type (in mins)\n      MaxShifts:                        array(NurseID, ShiftID) of integer         ! Maximum number of shifts of type t that can be assigned to nurse i\n      MaxTotalMinutes:                  array(NurseID) of integer                  ! Maximum number of minutes that nurse i must be assigned\n      MinTotalMinutes:                  array(NurseID) of integer                  ! Minimum number of minutes that nurse i must be assigned\n      MaxConsecutiveShifts:             array(NurseID) of integer                  ! Maximum number of consecutive shifts that nurse i must work\n      MinConsecutiveShifts:             array(NurseID) of integer                  ! Minimum number of consecutive shifts that nurse i must work\n      MinConsecutiveDaysOff:            array(NurseID) of integer                  ! Minimum number of consecutive days off that nurse i can be assigned\n      MaxWeekends:                      array(NurseID) of integer                  ! Maximum number of weekends that nurse i can work\n      PreferredCoverage:                array(Days, ShiftID) of integer            ! Preferred total nurses assigned to shift t on day d\n      UnderstaffedPenalty:              array(Days, ShiftID) of integer            ! Penalty if assignment is below preferred cover for shift t on day d\n      OverstaffedPenalty:               array(Days, ShiftID) of integer            ! Penalty if assignment is above preferred cover for shift t on day d\n      ShiftAssigned:                    array(NurseID, Days, ShiftID) of mpvar     ! Binary variable for whether shift t is assigned to nurse i on day d or not\n      WeekendShiftAssigned:             array(NurseID, Weekends) of mpvar          ! Binary variable for whether nurse i works on weekend w or not\n      NursesBelowPreferredCoverage:     array(Days, ShiftID) of mpvar              ! Total nurses below preferred coverage for shift t on day d\n      NursesAbovePreferredCoverage:     array(Days, ShiftID) of mpvar              ! Total nurses above preferred coverage for shift\n      NotAssignedPreferredShiftPenalty: array(NurseID, Days, ShiftID) of integer   ! Penalty if shift t is not assigned to nurse i on day d\n      AssignedNotPreferredShiftPenalty: array(NurseID, Days, ShiftID) of integer   ! Penalty if shift t is assigned to nurse i\n      ForbiddenSets:                    array(ShiftID) of set of string\n  end-declarations\n\n  initializations from \"Instance2.dat\"\n    NurseID Days Weekends PlanningHorizon NumWeekends ShiftID  DaysOff ShiftLength MaxShifts\n    MaxTotalMinutes MinTotalMinutes MaxConsecutiveShifts MinConsecutiveShifts MinConsecutiveDaysOff\n    MaxWeekends PreferredCoverage UnderstaffedPenalty OverstaffedPenalty ForbiddenShifts\n    AssignedNotPreferredShiftPenalty NotAssignedPreferredShiftPenalty\n  end-initializations\n\n\n  ! ----------------------    Objective Function    ---------------------------\n  ! Define Objective: to minimize penalties\n\n  ShiftOnPenalty := sum(i in NurseID, d in Days, t in ShiftID) NotAssignedPreferredShiftPenalty(i,d,t)*(1 - ShiftAssigned(i,d,t))\n  ShiftOffPenalty := sum(i in NurseID, d in Days, t in ShiftID) AssignedNotPreferredShiftPenalty(i,d,t)*ShiftAssigned(i,d,t)\n  UndercoverPenalty := sum(d in Days, t in ShiftID) UnderstaffedPenalty(d,t)*NursesBelowPreferredCoverage(d,t)\n  OvercoverPenalty  := sum(d in Days, t in ShiftID) OverstaffedPenalty(d,t)*NursesAbovePreferredCoverage(d,t)\n\n  TotalPenalty := UndercoverPenalty + OvercoverPenalty  + ShiftOnPenalty + ShiftOffPenalty\n\n  ! ----------------------    Constraints     --------------------------------\n  ! Define the Constraints\n\n\n\n\n  ! HC1: An employee cannot be assigned more than one shift per day\n  forall (i in NurseID, d in Days) do\n    ShiftCS(i,d) := sum(t in ShiftID) ShiftAssigned(i,d,t) <= 1\n  end-do\n\n\n\n\n\n  ! HC2: No Forbidden shifts\n  forall (t in ShiftID) do\n    forall (Ft in ShiftID) do\n      if ForbiddenShifts(t, Ft) <> \"NA\" then\n        ForbiddenSets(t) += {ForbiddenShifts(t, Ft)}\n      end-if\n    end-do\n  end-do\n\n  forall (d in 1..PlanningHorizon-1) do\n    forall(i in NurseID, t in ShiftID) do\n    ForbiddenCS(i,d,t) := ShiftAssigned(i,d,t) + sum(u in ForbiddenSets(t)) ShiftAssigned(i, d+1, u) <= 1\n    end-do\n  end-do\n\n\n  ! HC3: Maximum number of shifts of each type assigned to an employee\n    forall (i in NurseID, t in ShiftID) do\n      MaxShiftsCS(i,t) := sum(d in Days) ShiftAssigned(i,d,t) <= MaxShifts(i,t)\n    end-do\n\n\n\n  ! HC4: Minimum and Maximum Work times\n    forall (i in NurseID) do\n      MinWorkTimeCS(i) := sum(d in Days, t in ShiftID) ShiftLength(t)*ShiftAssigned(i,d,t) >= MinTotalMinutes(i)\n      MaxWorkTimeCS(i) := sum(d in Days, t in ShiftID) ShiftLength(t)*ShiftAssigned(i,d,t) <= MaxTotalMinutes(i)\n    end-do\n\n\n  ! HC5: Minimum and Maximum consecutive shifts\n    forall (i in NurseID) do\n      ! Maximum consecutive shifts\n      cmax := MaxConsecutiveShifts(i)\n      maxd := PlanningHorizon - cmax\n      forall (d in 1..maxd) do\n        MaxConsecutiveShiftsCS(i,d) :=  sum(t in ShiftID, j in d..d+cmax) ShiftAssigned(i,j,t) <= cmax\n      end-do\n\n    ! Minimum consecutive shifts\n      maxs := MinConsecutiveShifts(i) - 1\n      forall (s in 1..maxs) do\n        maxd := PlanningHorizon - (s+1)\n        forall (d in 1..maxd) do\n          MinConsecutiveShiftsCS(i,d) := (sum(t in ShiftID) ShiftAssigned(i,d,t)) +\n          (s - sum(j in d+1..d+s, t in ShiftID) ShiftAssigned(i,j,t)) +\n          (sum(t in ShiftID) ShiftAssigned(i, d+s+1, t)) >= 1\n        end-do\n      end-do\n    end-do\n\n\n  ! HC6: Minimum Consecutive Days Off\n    forall (i in NurseID) do\n      maxs := MinConsecutiveDaysOff(i) - 1\n      forall (s in 1..maxs) do\n        maxd := PlanningHorizon - (s+1)\n        forall (d in 1..maxd) do\n          MinConsecutiveDaysOffCS(i,d) := (1 - sum(t in ShiftID) ShiftAssigned(i,d,t)) +\n          (sum(j in d+1..d+s, t in ShiftID) ShiftAssigned(i,j,t)) +\n          (1 - sum(t in ShiftID) ShiftAssigned(i, d+s+1, t)) >= 1\n        end-do\n      end-do\n    end-do\n\n\n  ! HC7: Maximum number of Weekends worked by nurses ---------------- check separately\n  forall (i in NurseID) do\n    MaxNumWeekendsCS(i) := sum(w in Weekends) WeekendShiftAssigned(i,w) <= MaxWeekends(i)\n    forall (w in Weekends) do\n      MinWeekendsCS(i,w) := sum(t in ShiftID) (ShiftAssigned(i, 7*w - 1, t) + ShiftAssigned(i, 7*w, t)) >= WeekendShiftAssigned(i,w)\n      MaxWeekendsCS(i,w) := sum(t in ShiftID) (ShiftAssigned(i, 7*w - 1, t) + ShiftAssigned(i, 7*w, t)) <= 2*WeekendShiftAssigned(i,w)\n    end-do\n  end-do\n\n\n  ! HC8: Days off as per request\n  forall (i in NurseID) do\n    forall (t in ShiftID, d in DaysOff(i)) do\n      DaysOffConstraint(i,d,t) := ShiftAssigned(i, d, t) = 0\n    end-do\n  end-do\n\n\n  ! HC9: Coverage requirements\n  forall (d in Days, t in ShiftID) do\n    CoverageCS(d,t) := (sum(i in NurseID) ShiftAssigned(i,d,t)) - NursesAbovePreferredCoverage(d,t) + NursesBelowPreferredCoverage(d,t) = PreferredCoverage(d,t)\n  end-do\n\n\n    ! Set integer and binary variables\n  forall(i in NurseID, d in Days, t in ShiftID, w in Weekends) do\n    ShiftAssigned(i,d,t) is_binary\n    WeekendShiftAssigned(i,w) is_binary\n    NursesBelowPreferredCoverage(d,t) is_integer\n    NursesAbovePreferredCoverage(d,t) is_integer\n  end-do\n\nwriteln(\"Defined constraints at this point?\")\nminimise(TotalPenalty)\nwriteln(\"End running model\")\n\nprocedure print_status\ndeclarations\n  status: string\nend-declarations\ncase getprobstat of\n  XPRS_OPT: status:=\"Solved to optimality\"\n  XPRS_UNF: status:=\"Unfinished\"\n  XPRS_INF: status:=\"Infeasible\"\n  XPRS_UNB: status:=\"Unbounded\"\n  XPRS_OTH: status:=\"Unsolved or objective worse than cutoff\"\n  else status:=\"???\"\nend-case\nwriteln(\"Problem status: \", status)\nend-procedure\n\n\n\n\nwriteln(\"Nurse schedule:\")\nwrite(\"       | \")\nforall(d in Days) write(d, \" | \")\nwriteln\nforall(i in NurseID) do\n  write(\"Nurse \", i, \"| \")\n  forall(d in Days) do\n      if getsol(ShiftAssigned(i,d,\"E\")) > 0 then\n        write(\"E\", \" | \")\n      elif getsol(ShiftAssigned(i,d,\"L\")) > 0 then\n        write(\"L\", \" | \")\n      ! elif getsol(ShiftAssigned(i,d,\"D\")) > 0 then\n      !   write(\"D\", \" | \")\n      ! elif getsol(ShiftAssigned(i,d,\"N\")) > 0 then\n      !   write(\"N\", \" | \")\n      else\n        write(\" \", \" | \")\n      end-if\n  end-do\n  writeln\nend-do\n\n\nwriteln(\"Weekends\")\nwrite(\"       | \")\nforall(w in Weekends) write(w, \" | \")\nwriteln\nforall(i in NurseID) do\n  write(\"Nurse \", i, \"| \")\n  forall(w in Weekends) do\n      if getsol(WeekendShiftAssigned(i,w)) > 0 then\n        write(getsol(sum(t in ShiftID) ShiftAssigned(i,7*w-1,t))+getsol( sum(t in ShiftID)ShiftAssigned(i,7*w,t)), \" | \")\n      else\n        write(\" \", \" | \")\n      end-if\n  end-do\n  writeln\nend-do\n\nwriteln\n\nwriteln(\"Checking that nurses are not assigned more than one shift per day\")\nforall (i in NurseID, d in Days) do\n  if (sum(t in ShiftID) getsol(ShiftAssigned(i,d,t)) >= 2) then\n    writeln(\"Nurse \", i, \" has more than one shift assigned on day \", d)\n  end-if\nend-do\n\nwriteln\nwriteln\n\n\nwriteln(\"Checking Days Off constraint\")\nforall (i in NurseID) do\n      writeln(\"Nurse \", i, \":\", DaysOff(i))\n      forall (t in ShiftID, u in DaysOff(i)) do\n        if getsol(ShiftAssigned(i,u,t)) > 0 then\n          writeln(\"Shift \", t, \":\", getsol(ShiftAssigned(i, u, t)))\n        end-if\n      end-do\nwriteln\nend-do\n\n\nprint_status\nwriteln\nwriteln(\"The minimised penalty = \", getobjval)\n\n\n(!if getprobstat=XPRS_INF then\n ! Print some details\n  getinfeas(ShiftAssigned, WeekendShiftAssigned, NursesBelowPreferredCoverage, NursesAbovePreferredCoverage)\n  writeln(\"Infeasible variables:\")\n  forall(v in ShiftAssigned) writeln(\"  \",getname(v))\n  forall(v in WeekendShiftAssigned) writeln(\"  \",getname(v))\n  forall(c in NursesAbovePreferredCoverage) writeln(\"  \",getname(c))\n  forall(c in NursesBelowPreferredCoverage) writeln(\"  \",getname(c))\nend-if!)\n\n\nend-model\n","undoManager":{"mark":-489,"position":100,"stack":[[{"start":{"row":240,"column":41},"end":{"row":240,"column":42},"action":"insert","lines":["0"],"id":14629}],[{"start":{"row":240,"column":43},"end":{"row":240,"column":44},"action":"insert","lines":[" "],"id":14630}],[{"start":{"row":240,"column":44},"end":{"row":240,"column":45},"action":"insert","lines":["t"],"id":14631}],[{"start":{"row":240,"column":45},"end":{"row":240,"column":46},"action":"insert","lines":["h"],"id":14632}],[{"start":{"row":240,"column":46},"end":{"row":240,"column":47},"action":"insert","lines":["e"],"id":14633}],[{"start":{"row":240,"column":47},"end":{"row":240,"column":48},"action":"insert","lines":["n"],"id":14634}],[{"start":{"row":241,"column":65},"end":{"row":242,"column":0},"action":"insert","lines":["",""],"id":14635},{"start":{"row":242,"column":0},"end":{"row":242,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":242,"column":8},"end":{"row":242,"column":9},"action":"insert","lines":["e"],"id":14636}],[{"start":{"row":242,"column":9},"end":{"row":242,"column":10},"action":"insert","lines":["n"],"id":14637}],[{"start":{"row":242,"column":10},"end":{"row":242,"column":11},"action":"insert","lines":["d"],"id":14638}],[{"start":{"row":242,"column":11},"end":{"row":242,"column":12},"action":"insert","lines":["-"],"id":14639}],[{"start":{"row":242,"column":12},"end":{"row":242,"column":13},"action":"insert","lines":["i"],"id":14640}],[{"start":{"row":242,"column":13},"end":{"row":242,"column":14},"action":"insert","lines":["f"],"id":14641}],[{"start":{"row":240,"column":38},"end":{"row":240,"column":39},"action":"insert","lines":[")"],"id":14642}],[{"start":{"row":240,"column":43},"end":{"row":240,"column":44},"action":"remove","lines":[")"],"id":14643}],[{"start":{"row":241,"column":8},"end":{"row":241,"column":10},"action":"insert","lines":["  "],"id":14644}],[{"start":{"row":97,"column":5},"end":{"row":97,"column":6},"action":"remove","lines":["!"],"id":14645}],[{"start":{"row":97,"column":4},"end":{"row":97,"column":5},"action":"remove","lines":["("],"id":14646}],[{"start":{"row":104,"column":11},"end":{"row":104,"column":12},"action":"remove","lines":[")"],"id":14647}],[{"start":{"row":104,"column":10},"end":{"row":104,"column":11},"action":"remove","lines":["!"],"id":14648}],[{"start":{"row":104,"column":10},"end":{"row":105,"column":0},"action":"insert","lines":["",""],"id":14649},{"start":{"row":105,"column":0},"end":{"row":105,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":105,"column":2},"end":{"row":105,"column":4},"action":"remove","lines":["  "],"id":14650}],[{"start":{"row":105,"column":0},"end":{"row":105,"column":2},"action":"remove","lines":["  "],"id":14651}],[{"start":{"row":104,"column":10},"end":{"row":105,"column":0},"action":"remove","lines":["",""],"id":14652}],[{"start":{"row":102,"column":63},"end":{"row":102,"column":64},"action":"remove","lines":["1"],"id":14653}],[{"start":{"row":102,"column":63},"end":{"row":102,"column":64},"action":"insert","lines":["d"],"id":14654}],[{"start":{"row":194,"column":22},"end":{"row":195,"column":0},"action":"insert","lines":["",""],"id":14655},{"start":{"row":195,"column":0},"end":{"row":195,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":195,"column":2},"end":{"row":195,"column":4},"action":"insert","lines":["  "],"id":14656}],[{"start":{"row":195,"column":4},"end":{"row":195,"column":5},"action":"insert","lines":["f"],"id":14657}],[{"start":{"row":195,"column":5},"end":{"row":195,"column":6},"action":"insert","lines":["o"],"id":14658}],[{"start":{"row":195,"column":6},"end":{"row":195,"column":7},"action":"insert","lines":["r"],"id":14659}],[{"start":{"row":195,"column":7},"end":{"row":195,"column":8},"action":"insert","lines":["a"],"id":14660}],[{"start":{"row":195,"column":8},"end":{"row":195,"column":9},"action":"insert","lines":["l"],"id":14661}],[{"start":{"row":195,"column":9},"end":{"row":195,"column":10},"action":"insert","lines":["l"],"id":14662}],[{"start":{"row":195,"column":10},"end":{"row":195,"column":11},"action":"insert","lines":["("],"id":14663}],[{"start":{"row":195,"column":10},"end":{"row":195,"column":11},"action":"remove","lines":["("],"id":14664}],[{"start":{"row":195,"column":9},"end":{"row":195,"column":10},"action":"remove","lines":["l"],"id":14665}],[{"start":{"row":195,"column":8},"end":{"row":195,"column":9},"action":"remove","lines":["l"],"id":14666}],[{"start":{"row":195,"column":7},"end":{"row":195,"column":8},"action":"remove","lines":["a"],"id":14667}],[{"start":{"row":195,"column":6},"end":{"row":195,"column":7},"action":"remove","lines":["r"],"id":14668}],[{"start":{"row":195,"column":5},"end":{"row":195,"column":6},"action":"remove","lines":["o"],"id":14669}],[{"start":{"row":195,"column":4},"end":{"row":195,"column":5},"action":"remove","lines":["f"],"id":14670}],[{"start":{"row":195,"column":2},"end":{"row":195,"column":4},"action":"remove","lines":["  "],"id":14671}],[{"start":{"row":195,"column":0},"end":{"row":195,"column":2},"action":"remove","lines":["  "],"id":14672}],[{"start":{"row":194,"column":22},"end":{"row":195,"column":0},"action":"remove","lines":["",""],"id":14673}],[{"start":{"row":198,"column":25},"end":{"row":199,"column":0},"action":"insert","lines":["",""],"id":14674},{"start":{"row":199,"column":0},"end":{"row":199,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":199,"column":8},"end":{"row":200,"column":25},"action":"insert","lines":["elif getsol(ShiftAssigned(i,d,\"L\")) > 0 then","        write(\"L\", \" | \")"],"id":14675}],[{"start":{"row":199,"column":6},"end":{"row":199,"column":8},"action":"remove","lines":["  "],"id":14676}],[{"start":{"row":200,"column":25},"end":{"row":201,"column":0},"action":"insert","lines":["",""],"id":14677},{"start":{"row":201,"column":0},"end":{"row":201,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":201,"column":6},"end":{"row":201,"column":8},"action":"remove","lines":["  "],"id":14678}],[{"start":{"row":201,"column":6},"end":{"row":202,"column":25},"action":"insert","lines":["elif getsol(ShiftAssigned(i,d,\"L\")) > 0 then","        write(\"L\", \" | \")"],"id":14679}],[{"start":{"row":200,"column":15},"end":{"row":200,"column":16},"action":"remove","lines":["L"],"id":14680}],[{"start":{"row":200,"column":15},"end":{"row":200,"column":16},"action":"insert","lines":["D"],"id":14681}],[{"start":{"row":199,"column":37},"end":{"row":199,"column":38},"action":"remove","lines":["L"],"id":14682}],[{"start":{"row":199,"column":37},"end":{"row":199,"column":38},"action":"insert","lines":["D"],"id":14683}],[{"start":{"row":202,"column":15},"end":{"row":202,"column":16},"action":"remove","lines":["L"],"id":14684}],[{"start":{"row":202,"column":15},"end":{"row":202,"column":16},"action":"insert","lines":["N"],"id":14685}],[{"start":{"row":201,"column":37},"end":{"row":201,"column":38},"action":"remove","lines":["L"],"id":14686}],[{"start":{"row":201,"column":37},"end":{"row":201,"column":38},"action":"insert","lines":["N"],"id":14687}],[{"start":{"row":219,"column":14},"end":{"row":219,"column":15},"action":"insert","lines":["s"],"id":14688}],[{"start":{"row":219,"column":15},"end":{"row":219,"column":16},"action":"insert","lines":["u"],"id":14689}],[{"start":{"row":219,"column":16},"end":{"row":219,"column":17},"action":"insert","lines":["m"],"id":14690}],[{"start":{"row":219,"column":17},"end":{"row":219,"column":18},"action":"insert","lines":["("],"id":14691}],[{"start":{"row":219,"column":18},"end":{"row":219,"column":19},"action":"insert","lines":["t"],"id":14692}],[{"start":{"row":219,"column":19},"end":{"row":219,"column":20},"action":"insert","lines":[" "],"id":14693}],[{"start":{"row":219,"column":20},"end":{"row":219,"column":21},"action":"insert","lines":["i"],"id":14694}],[{"start":{"row":219,"column":21},"end":{"row":219,"column":22},"action":"insert","lines":["n"],"id":14695}],[{"start":{"row":219,"column":22},"end":{"row":219,"column":23},"action":"insert","lines":[" "],"id":14696}],[{"start":{"row":219,"column":23},"end":{"row":219,"column":24},"action":"insert","lines":["S"],"id":14697}],[{"start":{"row":219,"column":24},"end":{"row":219,"column":25},"action":"insert","lines":["h"],"id":14698}],[{"start":{"row":219,"column":25},"end":{"row":219,"column":26},"action":"insert","lines":["i"],"id":14699}],[{"start":{"row":219,"column":26},"end":{"row":219,"column":27},"action":"insert","lines":["f"],"id":14700}],[{"start":{"row":219,"column":23},"end":{"row":219,"column":27},"action":"remove","lines":["Shif"],"id":14701},{"start":{"row":219,"column":23},"end":{"row":219,"column":30},"action":"insert","lines":["ShiftID"]}],[{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"insert","lines":[")"],"id":14702}],[{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"insert","lines":[" "],"id":14703}],[{"start":{"row":219,"column":63},"end":{"row":219,"column":64},"action":"remove","lines":["\""],"id":14704}],[{"start":{"row":219,"column":62},"end":{"row":219,"column":63},"action":"remove","lines":["E"],"id":14705}],[{"start":{"row":219,"column":61},"end":{"row":219,"column":62},"action":"remove","lines":["\""],"id":14706}],[{"start":{"row":219,"column":61},"end":{"row":219,"column":62},"action":"insert","lines":["t"],"id":14707}],[{"start":{"row":219,"column":64},"end":{"row":219,"column":99},"action":"remove","lines":["+getsol(ShiftAssigned(i,7*w-1,\"L\"))"],"id":14708}],[{"start":{"row":219,"column":94},"end":{"row":219,"column":95},"action":"remove","lines":["\""],"id":14709}],[{"start":{"row":219,"column":93},"end":{"row":219,"column":94},"action":"remove","lines":["E"],"id":14710}],[{"start":{"row":219,"column":92},"end":{"row":219,"column":93},"action":"remove","lines":["\""],"id":14711}],[{"start":{"row":219,"column":92},"end":{"row":219,"column":93},"action":"insert","lines":["t"],"id":14712}],[{"start":{"row":219,"column":95},"end":{"row":219,"column":128},"action":"remove","lines":["+getsol(ShiftAssigned(i,7*w,\"L\"))"],"id":14713}],[{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"insert","lines":["("],"id":14745}],[{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"remove","lines":["("],"id":14746}],[{"start":{"row":219,"column":14},"end":{"row":219,"column":31},"action":"remove","lines":["sum(t in ShiftID)"],"id":14747}],[{"start":{"row":219,"column":14},"end":{"row":219,"column":15},"action":"remove","lines":[" "],"id":14748}],[{"start":{"row":219,"column":21},"end":{"row":219,"column":38},"action":"insert","lines":["sum(t in ShiftID)"],"id":14749}],[{"start":{"row":219,"column":38},"end":{"row":219,"column":39},"action":"insert","lines":[" "],"id":14750}],[{"start":{"row":219,"column":72},"end":{"row":219,"column":73},"action":"insert","lines":[" "],"id":14751}],[{"start":{"row":219,"column":73},"end":{"row":219,"column":90},"action":"insert","lines":["sum(t in ShiftID)"],"id":14752}],[{"start":{"row":105,"column":0},"end":{"row":105,"column":4},"action":"remove","lines":["    "],"id":14753},{"start":{"row":155,"column":8},"end":{"row":155,"column":9},"action":"remove","lines":[" "]},{"start":{"row":258,"column":21},"end":{"row":258,"column":22},"action":"remove","lines":[" "]}],[{"start":{"row":107,"column":0},"end":{"row":107,"column":28},"action":"remove","lines":["    forall (i in NurseID) do"],"id":14754}],[{"start":{"row":106,"column":32},"end":{"row":107,"column":0},"action":"remove","lines":["",""],"id":14755}],[{"start":{"row":104,"column":0},"end":{"row":104,"column":10},"action":"remove","lines":["    end-do"],"id":14756}],[{"start":{"row":103,"column":12},"end":{"row":104,"column":0},"action":"remove","lines":["",""],"id":14757}],[{"start":{"row":33,"column":32},"end":{"row":33,"column":33},"action":"remove","lines":["8"],"id":14758}],[{"start":{"row":33,"column":32},"end":{"row":33,"column":33},"action":"insert","lines":["2"],"id":14759}],[{"start":{"row":197,"column":6},"end":{"row":197,"column":8},"action":"insert","lines":["! "],"id":14760},{"start":{"row":198,"column":6},"end":{"row":198,"column":8},"action":"insert","lines":["! "]},{"start":{"row":199,"column":6},"end":{"row":199,"column":8},"action":"insert","lines":["! "]},{"start":{"row":200,"column":6},"end":{"row":200,"column":8},"action":"insert","lines":["! "]}],[{"start":{"row":197,"column":0},"end":{"row":200,"column":27},"action":"remove","lines":["      ! elif getsol(ShiftAssigned(i,d,\"D\")) > 0 then","      !   write(\"D\", \" | \")","      ! elif getsol(ShiftAssigned(i,d,\"N\")) > 0 then","      !   write(\"N\", \" | \")"],"id":14761},{"start":{"row":197,"column":0},"end":{"row":198,"column":0},"action":"insert","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":197,"column":0},"end":{"row":200,"column":27},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1699626964965}