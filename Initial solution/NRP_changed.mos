model nurse_rostering
  uses "mmxprs"!, "kalis"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  declarations
      NurseID:                          set of string                              ! Set of Nurses (i)
      PlanningHorizon:                  integer                                    ! Number of days in the planning horizon (d)
      Days:                             set of integer                             ! Set of days in the planning horizon
      NumWeekends:                      integer                                    ! Number of weekends in planning horizon
      Weekends:                         set of integer                            ! Set of weekends in the planning horizon
      ShiftID:                          set of string                              ! Types of shifts (t)
      DaysOff:                          array(NurseID) of integer                  ! Set of days that nurse i cannot be assigned shifts
      ShiftLength:                      array(ShiftID) of integer                  ! Length of shift type (in mins)
      MaxShifts:                        array(NurseID, ShiftID) of integer         ! Maximum number of shifts of type t that can be assigned to nurse i
      MaxTotalMinutes:                  array(NurseID) of integer                  ! Maximum number of minutes that nurse i must be assigned
      MinTotalMinutes:                  array(NurseID) of integer                  ! Minimum number of minutes that nurse i must be assigned
      MaxConsecutiveShifts:             array(NurseID) of integer                  ! Maximum number of consecutive shifts that nurse i must work
      MinConsecutiveShifts:             array(NurseID) of integer                  ! Minimum number of consecutive shifts that nurse i must work
      MinConsecutiveDaysOff:            array(NurseID) of integer                  ! Minimum number of consecutive days off that nurse i can be assigned
      MaxWeekends:                      array(NurseID) of integer                  ! Maximum number of weekends that nurse i can work
      PreferredCoverage:                array(Days, ShiftID) of integer            ! Preferred total nurses assigned to shift t on day d
      UnderstaffedPenalty:              array(Days, ShiftID) of integer            ! Penalty if assignment is below preferred cover for shift t on day d
      OverstaffedPenalty:               array(Days, ShiftID) of integer            ! Penalty if assignment is above preferred cover for shift t on day d
      ShiftAssigned:                    array(NurseID, Days, ShiftID) of mpvar     ! Binary variable for whether shift t is assigned to nurse i on day d or not
      WeekendShiftAssigned:             array(NurseID, Weekends) of mpvar          ! Binary variable for whether nurse i works on weekend w or not
      NursesBelowPreferredCoverage:     array(Days, ShiftID) of mpvar              ! Total nurses below preferred coverage for shift t on day d
      NursesAbovePreferredCoverage:     array(Days, ShiftID) of mpvar              ! Total nurses above preferred coverage for shift
      !ForbiddenShifts:                  array(ShiftID) of string                   ! Set of shift types that cannot be assigned immediately after shift type t
      !NotAssignedPreferredShiftPenalty: array(NurseID, Days, ShiftID) of integer   ! Penalty if shift t is not assigned to nurse i on day d
      !AssignedNotPreferredShiftPenalty: array(NurseID, Days, ShiftID) of integer   ! Penalty if shift t is assigned to nurse i
      !TotalShiftOnOffRequestPenalty:    array(NurseID, Days, ShiftID) of mpvar     ! Total incurred penalty for shift on/off requests for nurse i on day d for shift t
  end-declarations

  initializations from "Instance2.dat"
    NurseID Days Weekends PlanningHorizon NumWeekends ShiftID  DaysOff ShiftLength MaxShifts
    MaxTotalMinutes MinTotalMinutes MaxConsecutiveShifts MinConsecutiveShifts MinConsecutiveDaysOff
    MaxWeekends PreferredCoverage UnderstaffedPenalty OverstaffedPenalty 
    ! NotAssignedPreferredShiftPenalty AssignedNotPreferredShiftPenalty ForbiddenShifts
  end-initializations

  ! ----------------------    Objective Function    ---------------------------
  ! Define Objective: to minimize penalties

  !ShiftOnPenalty := sum(i in NurseID, d in Days, t in ShiftID) NotAssignedPreferredShiftPenalty(i,d,t)*(1 - ShiftAssigned(i,d,t))
  !ShiftOffPenalty := sum(i in NurseID, d in Days, t in ShiftID) AssignedNotPreferredShiftPenalty(i,d,t)*ShiftAssigned(i,d,t)
  UndercoverPenalty := sum(d in Days, t in ShiftID) UnderstaffedPenalty(d,t)*NursesBelowPreferredCoverage(d,t)
  OvercoverPenalty  := sum(d in Days, t in ShiftID) OverstaffedPenalty(d,t)*NursesAbovePreferredCoverage(d,t)

  TotalPenalty := UndercoverPenalty + OvercoverPenalty

  ! ----------------------    Constraints     --------------------------------
  ! Define the Constraints

  ! HC1: An employee cannot be assigned more than one shift per day
  forall (i in NurseID, d in Days) do
    ShiftCS(i,d) := sum(t in ShiftID) ShiftAssigned(i,d,t) <= 1
  end-do
  ! HC2: No Forbidden shifts
  ! forall (d in Days) do
  !   forall(i in NurseID, t in ShiftID) do
  !   ForbiddenCS(i,d,t) := ShiftAssigned(i,d,t) + sum(u in ForbiddenShifts(t)) ShiftAssigned(i, d+1, u) <= 1
  !   end-do
  ! end-do


  ! HC3: Maximum number of shifts of each type assigned to an employee
    forall (i in NurseID, t in ShiftID) do
      MaxShiftsCS(i,t) := sum(d in Days) ShiftAssigned(i,d,t) <= MaxShifts(i,t)
    end-do


  ! HC4: Minimum and Maximum Work times
    forall (i in NurseID) do
      MinWorkTimeCS(i) := sum(d in Days, t in ShiftID) ShiftLength(t)*ShiftAssigned(i,d,t) >= MinTotalMinutes(i)
      MaxWorkTimeCS(i) := sum(d in Days, t in ShiftID) ShiftLength(t)*ShiftAssigned(i,d,t) <= MaxTotalMinutes(i)
    end-do


  ! HC5: Minimum and Maximum consecutive shifts
    ! forall (i in NurseID) do
    !   maxc := MaxConsecutiveShifts(i)
    !   maxd := PlanningHorizon - maxc
    !   forall (d in 1..maxd) do
    !     MaxConsecutiveShiftsCS(i,d) :=  (sum(t in ShiftID) (sum(j in 1..d+maxc) ShiftAssigned(i,j,t))) <= maxc
    !   end-do

    !   ! Minimum consecutive shifts
    !   minc := MinConsecutiveShifts(i)
    !   maxs := minc - 1
    !   forall (s in 1..maxs) do
    !     maxd := PlanningHorizon - (s+1)
    !     forall (d in 1..maxd) do
    !       MinConsecutiveShiftsCS(i,d) := (1 - sum(t in ShiftID) ShiftAssigned(i,d,t)) +
    !       (s - sum(j in d..d+s, t in ShiftID) ShiftAssigned(i,j,t)) +
    !       (sum(t in ShiftID) ShiftAssigned(i, d+s+1, t)) >= 1
    !     end-do
    !   end-do
    ! end-do

  ! HC6: Minimum Consecutive Days Off
  (!  forall (i in NurseID) do
      maxs := MinConsecutiveDaysOff(i) - 1
      forall (s in 1..maxs) do
        maxd := PlanningHorizon - (s+1)
        forall (d in 1..maxd) do
          MinConsecutiveDaysOffCS(i,d) := (1 - sum(t in ShiftID) ShiftAssigned(i,d,t)) +
          (sum(j in d+1..d+s, t in ShiftID) ShiftAssigned(i,j,t)) +
          (1 - sum(t in ShiftID) ShiftAssigned(i, d+s+1, t)) >= 1
        end-do
      end-do
    end-do!)

  ! HC7: Maximum number of Weekends worked by nurses
 (! forall (i in NurseID) do
    MaxNumWeekendsCS(i) := sum(w in Weekends) WeekendShiftAssigned(i,w) <= MaxWeekends(i)
    forall (w in Weekends) do
      MinWeekendsCS(i,w) := sum(t in ShiftID) (ShiftAssigned(i, 7*w - 1, t) + ShiftAssigned(i, 7*w, t)) >= WeekendShiftAssigned(i,w)
      MaxWeekendsCS(i,w) := sum(t in ShiftID) (ShiftAssigned(i, 7*w - 1, t) + ShiftAssigned(i, 7*w, t)) <= 2*WeekendShiftAssigned(i,w)
    end-do
  end-do!)


  ! HC8: Days off as per request
 (! forall (i in NurseID, t in ShiftID) do
      DaysOffCS := ShiftAssigned(i,DaysOff(i),t) = 0
  end-do!)

  ! HC9: Coverage requirements
  forall (d in Days, t in ShiftID) do
    CoverageCS(d,t) := (sum(i in NurseID) ShiftAssigned(i,d,t)) - NursesAbovePreferredCoverage(d,t) + NursesBelowPreferredCoverage(d,t) = PreferredCoverage(d,t)
  end-do

  ! Set integer and binary variables
  forall(i in NurseID, d in Days, t in ShiftID, w in Weekends) do
    ShiftAssigned(i,d,t) is_binary
    WeekendShiftAssigned(i,w) is_binary
    NursesBelowPreferredCoverage(d,t) is_integer
    NursesAbovePreferredCoverage(d,t) is_integer
  end-do
  !TotalShiftOnOffRequestPenalty is_integer


minimise(TotalPenalty)


procedure print_status
declarations
  status: string
end-declarations
case getprobstat of
  XPRS_OPT: status:="Solved to optimality"
  XPRS_UNF: status:="Unfinished"
  XPRS_INF: status:="Infeasible"
  XPRS_UNB: status:="Unbounded"
  XPRS_OTH: status:="Unsolved or objective worse than cutoff"
  else status:="???"
end-case
writeln("Problem status: ", status)
end-procedure




writeln("Nurse schedule:")
write("       | ")
forall(d in Days) write(d, " | ")
writeln
forall(i in NurseID) do
  write("Nurse ", i, "|")
  forall(d in Days) do
    forall(t in ShiftID) do
      if getsol(ShiftAssigned(i,d,t)) > 0 then
        write(t, " |")
      else 
        write(" ", " |")
      end-if
    end-do
  end-do
  writeln
end-do
    
    
!     forall (t in Times) do
!       write(":", strfmt(getsol(Output(s, t)), 6, 0))
!     end-do
!     write(", MaxOutput = ", MaxOutput(s))
!     writeln
! end-do
! write("Solar")
! forall (t in Times) do
!   write(",", strfmt(getsol(SolarOutput(t)), 6, 0))
! end-do
! writeln

  writeln("Begin running model")
  !...
  writeln("End running model")

print_status
writeln
writeln("The minimised penalty = ", getobjval)





end-model
